/**
 * Azure IP Ranges and Service Tags - Public Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Value.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

Value::Value(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string Value::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void Value::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree Value::toPropertyTree()
{
    return toPropertyTree_internal();
}

void Value::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string Value::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void Value::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree Value::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("name", m_Name);
	pt.put("id", m_Id);
	if (m_Properties != nullptr) {
		pt.add_child("properties", m_Properties->toPropertyTree());
	}
	return pt;
}

void Value::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Name = pt.get("name", "");
	m_Id = pt.get("id", "");
	if (pt.get_child_optional("properties")) {
		m_Properties = std::make_shared<ValueProperties>();
		m_Properties->fromPropertyTree(pt.get_child("properties"));
	}
}

std::string Value::getName() const
{
    return m_Name;
}

void Value::setName(std::string value)
{
	m_Name = value;
}
std::string Value::getId() const
{
    return m_Id;
}

void Value::setId(std::string value)
{
	m_Id = value;
}
std::shared_ptr<ValueProperties> Value::getProperties() const
{
    return m_Properties;
}

void Value::setProperties(std::shared_ptr<ValueProperties> value)
{
	m_Properties = value;
}

std::vector<Value> createValueVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<Value>();
    for (const auto& child: pt) {
        vec.emplace_back(Value(child.second));
    }

    return vec;
}

}
}
}
}

