/**
 * Azure IP Ranges and Service Tags - Public Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ValueProperties.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ValueProperties::ValueProperties(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string ValueProperties::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void ValueProperties::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree ValueProperties::toPropertyTree()
{
    return toPropertyTree_internal();
}

void ValueProperties::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string ValueProperties::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void ValueProperties::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ValueProperties::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("changeNumber", m_ChangeNumber);
	pt.put("region", m_Region);
	pt.put("regionId", m_RegionId);
	pt.put("platform", m_Platform);
	pt.put("systemService", m_SystemService);
	// generate tree for AddressPrefixes
	if (!m_AddressPrefixes.empty()) {
		for (const auto &childEntry : m_AddressPrefixes) {
            ptree AddressPrefixes_node;
            AddressPrefixes_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", AddressPrefixes_node));
		}
		pt.add_child("addressPrefixes", tmp_node);
		tmp_node.clear();
	}
	// generate tree for NetworkFeatures
	if (!m_NetworkFeatures.empty()) {
		for (const auto &childEntry : m_NetworkFeatures) {
            ptree NetworkFeatures_node;
            NetworkFeatures_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", NetworkFeatures_node));
		}
		pt.add_child("networkFeatures", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void ValueProperties::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_ChangeNumber = pt.get("changeNumber", 0);
	m_Region = pt.get("region", "");
	m_RegionId = pt.get("regionId", 0);
	m_Platform = pt.get("platform", "");
	m_SystemService = pt.get("systemService", "");
	// push all items of AddressPrefixes into member vector
	if (pt.get_child_optional("addressPrefixes")) {
		for (const auto &childTree : pt.get_child("addressPrefixes")) {
            std::string val =
                childTree.second.data();
            m_AddressPrefixes.emplace_back(std::move(val));
		}
	}
	// push all items of NetworkFeatures into member vector
	if (pt.get_child_optional("networkFeatures")) {
		for (const auto &childTree : pt.get_child("networkFeatures")) {
            std::string val =
                childTree.second.data();
            m_NetworkFeatures.emplace_back(std::move(val));
		}
	}
}

int32_t ValueProperties::getChangeNumber() const
{
    return m_ChangeNumber;
}

void ValueProperties::setChangeNumber(int32_t value)
{
	m_ChangeNumber = value;
}
std::string ValueProperties::getRegion() const
{
    return m_Region;
}

void ValueProperties::setRegion(std::string value)
{
	m_Region = value;
}
int32_t ValueProperties::getRegionId() const
{
    return m_RegionId;
}

void ValueProperties::setRegionId(int32_t value)
{
	m_RegionId = value;
}
std::string ValueProperties::getPlatform() const
{
    return m_Platform;
}

void ValueProperties::setPlatform(std::string value)
{
	m_Platform = value;
}
std::string ValueProperties::getSystemService() const
{
    return m_SystemService;
}

void ValueProperties::setSystemService(std::string value)
{
	m_SystemService = value;
}
std::vector<std::string> ValueProperties::getAddressPrefixes() const
{
    return m_AddressPrefixes;
}

void ValueProperties::setAddressPrefixes(std::vector<std::string> value)
{
	m_AddressPrefixes = value;
}
std::vector<std::string> ValueProperties::getNetworkFeatures() const
{
    return m_NetworkFeatures;
}

void ValueProperties::setNetworkFeatures(std::vector<std::string> value)
{
	m_NetworkFeatures = value;
}

std::vector<ValueProperties> createValuePropertiesVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<ValueProperties>();
    for (const auto& child: pt) {
        vec.emplace_back(ValueProperties(child.second));
    }

    return vec;
}

}
}
}
}

