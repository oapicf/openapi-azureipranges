/**
* Azure IP Ranges and Service Tags - Public Cloud
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 0.10.1-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Change.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Change::Change()
{
    m_ChangeNumber = 0;
    m_ChangeNumberIsSet = false;
    m_Cloud = "";
    m_CloudIsSet = false;
    m_ValuesIsSet = false;
    
}

void Change::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Change::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Change::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Change" : pathPrefix;

                 
    if (valuesIsSet())
    {
        const std::vector<org::openapitools::server::model::Value>& value = m_Values;
        const std::string currentValuePath = _pathPrefix + ".values";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::Value& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".values") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool Change::operator==(const Change& rhs) const
{
    return
    
    
    
    ((!changeNumberIsSet() && !rhs.changeNumberIsSet()) || (changeNumberIsSet() && rhs.changeNumberIsSet() && getChangeNumber() == rhs.getChangeNumber())) &&
    
    
    ((!cloudIsSet() && !rhs.cloudIsSet()) || (cloudIsSet() && rhs.cloudIsSet() && getCloud() == rhs.getCloud())) &&
    
    
    ((!valuesIsSet() && !rhs.valuesIsSet()) || (valuesIsSet() && rhs.valuesIsSet() && getValues() == rhs.getValues()))
    
    ;
}

bool Change::operator!=(const Change& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Change& o)
{
    j = nlohmann::json::object();
    if(o.changeNumberIsSet())
        j["changeNumber"] = o.m_ChangeNumber;
    if(o.cloudIsSet())
        j["cloud"] = o.m_Cloud;
    if(o.valuesIsSet() || !o.m_Values.empty())
        j["values"] = o.m_Values;
    
}

void from_json(const nlohmann::json& j, Change& o)
{
    if(j.find("changeNumber") != j.end())
    {
        j.at("changeNumber").get_to(o.m_ChangeNumber);
        o.m_ChangeNumberIsSet = true;
    } 
    if(j.find("cloud") != j.end())
    {
        j.at("cloud").get_to(o.m_Cloud);
        o.m_CloudIsSet = true;
    } 
    if(j.find("values") != j.end())
    {
        j.at("values").get_to(o.m_Values);
        o.m_ValuesIsSet = true;
    } 
    
}

int32_t Change::getChangeNumber() const
{
    return m_ChangeNumber;
}
void Change::setChangeNumber(int32_t const value)
{
    m_ChangeNumber = value;
    m_ChangeNumberIsSet = true;
}
bool Change::changeNumberIsSet() const
{
    return m_ChangeNumberIsSet;
}
void Change::unsetChangeNumber()
{
    m_ChangeNumberIsSet = false;
}
std::string Change::getCloud() const
{
    return m_Cloud;
}
void Change::setCloud(std::string const& value)
{
    m_Cloud = value;
    m_CloudIsSet = true;
}
bool Change::cloudIsSet() const
{
    return m_CloudIsSet;
}
void Change::unsetCloud()
{
    m_CloudIsSet = false;
}
std::vector<org::openapitools::server::model::Value> Change::getValues() const
{
    return m_Values;
}
void Change::setValues(std::vector<org::openapitools::server::model::Value> const& value)
{
    m_Values = value;
    m_ValuesIsSet = true;
}
bool Change::valuesIsSet() const
{
    return m_ValuesIsSet;
}
void Change::unsetValues()
{
    m_ValuesIsSet = false;
}


} // namespace org::openapitools::server::model

