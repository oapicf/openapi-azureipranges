/**
 * Azure IP Ranges and Service Tags - Public Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.9.0-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIValueProperties.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIValueProperties::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (ChangeNumber.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("changeNumber")); WriteJsonValue(Writer, ChangeNumber.GetValue());
	}
	if (Region.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("region")); WriteJsonValue(Writer, Region.GetValue());
	}
	if (RegionId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("regionId")); WriteJsonValue(Writer, RegionId.GetValue());
	}
	if (Platform.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("platform")); WriteJsonValue(Writer, Platform.GetValue());
	}
	if (SystemService.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("systemService")); WriteJsonValue(Writer, SystemService.GetValue());
	}
	if (AddressPrefixes.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("addressPrefixes")); WriteJsonValue(Writer, AddressPrefixes.GetValue());
	}
	if (NetworkFeatures.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("networkFeatures")); WriteJsonValue(Writer, NetworkFeatures.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIValueProperties::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("changeNumber"), ChangeNumber);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("region"), Region);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("regionId"), RegionId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("platform"), Platform);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("systemService"), SystemService);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("addressPrefixes"), AddressPrefixes);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("networkFeatures"), NetworkFeatures);

	return ParseSuccess;
}

}
