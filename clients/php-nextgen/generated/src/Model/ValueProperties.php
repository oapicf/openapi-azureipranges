<?php
/**
 * ValueProperties
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Azure IP Ranges and Service Tags - Public Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah+oapicf@cliffano.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * ValueProperties Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ValueProperties implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ValueProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'change_number' => 'int',
        'region' => 'string',
        'region_id' => 'int',
        'platform' => 'string',
        'system_service' => 'string',
        'address_prefixes' => 'string[]',
        'network_features' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'change_number' => null,
        'region' => null,
        'region_id' => null,
        'platform' => null,
        'system_service' => null,
        'address_prefixes' => null,
        'network_features' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'change_number' => false,
        'region' => false,
        'region_id' => false,
        'platform' => false,
        'system_service' => false,
        'address_prefixes' => false,
        'network_features' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'change_number' => 'changeNumber',
        'region' => 'region',
        'region_id' => 'regionId',
        'platform' => 'platform',
        'system_service' => 'systemService',
        'address_prefixes' => 'addressPrefixes',
        'network_features' => 'networkFeatures'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'change_number' => 'setChangeNumber',
        'region' => 'setRegion',
        'region_id' => 'setRegionId',
        'platform' => 'setPlatform',
        'system_service' => 'setSystemService',
        'address_prefixes' => 'setAddressPrefixes',
        'network_features' => 'setNetworkFeatures'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'change_number' => 'getChangeNumber',
        'region' => 'getRegion',
        'region_id' => 'getRegionId',
        'platform' => 'getPlatform',
        'system_service' => 'getSystemService',
        'address_prefixes' => 'getAddressPrefixes',
        'network_features' => 'getNetworkFeatures'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('change_number', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('region_id', $data ?? [], null);
        $this->setIfExists('platform', $data ?? [], null);
        $this->setIfExists('system_service', $data ?? [], null);
        $this->setIfExists('address_prefixes', $data ?? [], null);
        $this->setIfExists('network_features', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets change_number
     *
     * @return int|null
     */
    public function getChangeNumber(): ?int
    {
        return $this->container['change_number'];
    }

    /**
     * Sets change_number
     *
     * @param int|null $change_number The number associated with the change.
     *
     * @return $this
     */
    public function setChangeNumber(?int $change_number): static
    {
        if (is_null($change_number)) {
            throw new InvalidArgumentException('non-nullable change_number cannot be null');
        }
        $this->container['change_number'] = $change_number;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion(): ?string
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region The region associated with the value.
     *
     * @return $this
     */
    public function setRegion(?string $region): static
    {
        if (is_null($region)) {
            throw new InvalidArgumentException('non-nullable region cannot be null');
        }
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets region_id
     *
     * @return int|null
     */
    public function getRegionId(): ?int
    {
        return $this->container['region_id'];
    }

    /**
     * Sets region_id
     *
     * @param int|null $region_id The ID of the region.
     *
     * @return $this
     */
    public function setRegionId(?int $region_id): static
    {
        if (is_null($region_id)) {
            throw new InvalidArgumentException('non-nullable region_id cannot be null');
        }
        $this->container['region_id'] = $region_id;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return string|null
     */
    public function getPlatform(): ?string
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param string|null $platform The platform associated with the value.
     *
     * @return $this
     */
    public function setPlatform(?string $platform): static
    {
        if (is_null($platform)) {
            throw new InvalidArgumentException('non-nullable platform cannot be null');
        }
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets system_service
     *
     * @return string|null
     */
    public function getSystemService(): ?string
    {
        return $this->container['system_service'];
    }

    /**
     * Sets system_service
     *
     * @param string|null $system_service The system service associated with the value.
     *
     * @return $this
     */
    public function setSystemService(?string $system_service): static
    {
        if (is_null($system_service)) {
            throw new InvalidArgumentException('non-nullable system_service cannot be null');
        }
        $this->container['system_service'] = $system_service;

        return $this;
    }

    /**
     * Gets address_prefixes
     *
     * @return string[]|null
     */
    public function getAddressPrefixes(): ?array
    {
        return $this->container['address_prefixes'];
    }

    /**
     * Sets address_prefixes
     *
     * @param string[]|null $address_prefixes The address prefixes associated with the value.
     *
     * @return $this
     */
    public function setAddressPrefixes(?array $address_prefixes): static
    {
        if (is_null($address_prefixes)) {
            throw new InvalidArgumentException('non-nullable address_prefixes cannot be null');
        }
        $this->container['address_prefixes'] = $address_prefixes;

        return $this;
    }

    /**
     * Gets network_features
     *
     * @return string[]|null
     */
    public function getNetworkFeatures(): ?array
    {
        return $this->container['network_features'];
    }

    /**
     * Sets network_features
     *
     * @param string[]|null $network_features The network features associated with the value.
     *
     * @return $this
     */
    public function setNetworkFeatures(?array $network_features): static
    {
        if (is_null($network_features)) {
            throw new InvalidArgumentException('non-nullable network_features cannot be null');
        }
        $this->container['network_features'] = $network_features;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


