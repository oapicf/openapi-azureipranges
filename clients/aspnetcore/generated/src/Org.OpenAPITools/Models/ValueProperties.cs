/*
 * Azure IP Ranges and Service Tags - Public Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ValueProperties : IEquatable<ValueProperties>
    {
        /// <summary>
        /// The number associated with the change.
        /// </summary>
        /// <value>The number associated with the change.</value>
        [DataMember(Name="changeNumber", EmitDefaultValue=true)]
        public int ChangeNumber { get; set; }

        /// <summary>
        /// The region associated with the value.
        /// </summary>
        /// <value>The region associated with the value.</value>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }

        /// <summary>
        /// The ID of the region.
        /// </summary>
        /// <value>The ID of the region.</value>
        [DataMember(Name="regionId", EmitDefaultValue=true)]
        public int RegionId { get; set; }

        /// <summary>
        /// The platform associated with the value.
        /// </summary>
        /// <value>The platform associated with the value.</value>
        [DataMember(Name="platform", EmitDefaultValue=false)]
        public string Platform { get; set; }

        /// <summary>
        /// The system service associated with the value.
        /// </summary>
        /// <value>The system service associated with the value.</value>
        [DataMember(Name="systemService", EmitDefaultValue=false)]
        public string SystemService { get; set; }

        /// <summary>
        /// The address prefixes associated with the value.
        /// </summary>
        /// <value>The address prefixes associated with the value.</value>
        [DataMember(Name="addressPrefixes", EmitDefaultValue=false)]
        public List<string> AddressPrefixes { get; set; }

        /// <summary>
        /// The network features associated with the value.
        /// </summary>
        /// <value>The network features associated with the value.</value>
        [DataMember(Name="networkFeatures", EmitDefaultValue=false)]
        public List<string> NetworkFeatures { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValueProperties {\n");
            sb.Append("  ChangeNumber: ").Append(ChangeNumber).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  RegionId: ").Append(RegionId).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  SystemService: ").Append(SystemService).Append("\n");
            sb.Append("  AddressPrefixes: ").Append(AddressPrefixes).Append("\n");
            sb.Append("  NetworkFeatures: ").Append(NetworkFeatures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ValueProperties)obj);
        }

        /// <summary>
        /// Returns true if ValueProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ValueProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValueProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ChangeNumber == other.ChangeNumber ||
                    
                    ChangeNumber.Equals(other.ChangeNumber)
                ) && 
                (
                    Region == other.Region ||
                    Region != null &&
                    Region.Equals(other.Region)
                ) && 
                (
                    RegionId == other.RegionId ||
                    
                    RegionId.Equals(other.RegionId)
                ) && 
                (
                    Platform == other.Platform ||
                    Platform != null &&
                    Platform.Equals(other.Platform)
                ) && 
                (
                    SystemService == other.SystemService ||
                    SystemService != null &&
                    SystemService.Equals(other.SystemService)
                ) && 
                (
                    AddressPrefixes == other.AddressPrefixes ||
                    AddressPrefixes != null &&
                    other.AddressPrefixes != null &&
                    AddressPrefixes.SequenceEqual(other.AddressPrefixes)
                ) && 
                (
                    NetworkFeatures == other.NetworkFeatures ||
                    NetworkFeatures != null &&
                    other.NetworkFeatures != null &&
                    NetworkFeatures.SequenceEqual(other.NetworkFeatures)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ChangeNumber.GetHashCode();
                    if (Region != null)
                    hashCode = hashCode * 59 + Region.GetHashCode();
                    
                    hashCode = hashCode * 59 + RegionId.GetHashCode();
                    if (Platform != null)
                    hashCode = hashCode * 59 + Platform.GetHashCode();
                    if (SystemService != null)
                    hashCode = hashCode * 59 + SystemService.GetHashCode();
                    if (AddressPrefixes != null)
                    hashCode = hashCode * 59 + AddressPrefixes.GetHashCode();
                    if (NetworkFeatures != null)
                    hashCode = hashCode * 59 + NetworkFeatures.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ValueProperties left, ValueProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ValueProperties left, ValueProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
