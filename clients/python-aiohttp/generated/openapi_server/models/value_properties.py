# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ValueProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, change_number: int=None, region: str=None, region_id: int=None, platform: str=None, system_service: str=None, address_prefixes: List[str]=None, network_features: List[str]=None):
        """ValueProperties - a model defined in OpenAPI

        :param change_number: The change_number of this ValueProperties.
        :param region: The region of this ValueProperties.
        :param region_id: The region_id of this ValueProperties.
        :param platform: The platform of this ValueProperties.
        :param system_service: The system_service of this ValueProperties.
        :param address_prefixes: The address_prefixes of this ValueProperties.
        :param network_features: The network_features of this ValueProperties.
        """
        self.openapi_types = {
            'change_number': int,
            'region': str,
            'region_id': int,
            'platform': str,
            'system_service': str,
            'address_prefixes': List[str],
            'network_features': List[str]
        }

        self.attribute_map = {
            'change_number': 'changeNumber',
            'region': 'region',
            'region_id': 'regionId',
            'platform': 'platform',
            'system_service': 'systemService',
            'address_prefixes': 'addressPrefixes',
            'network_features': 'networkFeatures'
        }

        self._change_number = change_number
        self._region = region
        self._region_id = region_id
        self._platform = platform
        self._system_service = system_service
        self._address_prefixes = address_prefixes
        self._network_features = network_features

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValueProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValueProperties of this ValueProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def change_number(self):
        """Gets the change_number of this ValueProperties.

        The number associated with the change.

        :return: The change_number of this ValueProperties.
        :rtype: int
        """
        return self._change_number

    @change_number.setter
    def change_number(self, change_number):
        """Sets the change_number of this ValueProperties.

        The number associated with the change.

        :param change_number: The change_number of this ValueProperties.
        :type change_number: int
        """

        self._change_number = change_number

    @property
    def region(self):
        """Gets the region of this ValueProperties.

        The region associated with the value.

        :return: The region of this ValueProperties.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ValueProperties.

        The region associated with the value.

        :param region: The region of this ValueProperties.
        :type region: str
        """

        self._region = region

    @property
    def region_id(self):
        """Gets the region_id of this ValueProperties.

        The ID of the region.

        :return: The region_id of this ValueProperties.
        :rtype: int
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this ValueProperties.

        The ID of the region.

        :param region_id: The region_id of this ValueProperties.
        :type region_id: int
        """

        self._region_id = region_id

    @property
    def platform(self):
        """Gets the platform of this ValueProperties.

        The platform associated with the value.

        :return: The platform of this ValueProperties.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ValueProperties.

        The platform associated with the value.

        :param platform: The platform of this ValueProperties.
        :type platform: str
        """

        self._platform = platform

    @property
    def system_service(self):
        """Gets the system_service of this ValueProperties.

        The system service associated with the value.

        :return: The system_service of this ValueProperties.
        :rtype: str
        """
        return self._system_service

    @system_service.setter
    def system_service(self, system_service):
        """Sets the system_service of this ValueProperties.

        The system service associated with the value.

        :param system_service: The system_service of this ValueProperties.
        :type system_service: str
        """

        self._system_service = system_service

    @property
    def address_prefixes(self):
        """Gets the address_prefixes of this ValueProperties.

        The address prefixes associated with the value.

        :return: The address_prefixes of this ValueProperties.
        :rtype: List[str]
        """
        return self._address_prefixes

    @address_prefixes.setter
    def address_prefixes(self, address_prefixes):
        """Sets the address_prefixes of this ValueProperties.

        The address prefixes associated with the value.

        :param address_prefixes: The address_prefixes of this ValueProperties.
        :type address_prefixes: List[str]
        """

        self._address_prefixes = address_prefixes

    @property
    def network_features(self):
        """Gets the network_features of this ValueProperties.

        The network features associated with the value.

        :return: The network_features of this ValueProperties.
        :rtype: List[str]
        """
        return self._network_features

    @network_features.setter
    def network_features(self, network_features):
        """Sets the network_features of this ValueProperties.

        The network features associated with the value.

        :param network_features: The network_features of this ValueProperties.
        :type network_features: List[str]
        """

        self._network_features = network_features
