// <auto-generated>
/*
 * Azure IP Ranges and Service Tags - Public Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ValueProperties
    /// </summary>
    public partial class ValueProperties : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValueProperties" /> class.
        /// </summary>
        /// <param name="changeNumber">The number associated with the change.</param>
        /// <param name="region">The region associated with the value.</param>
        /// <param name="regionId">The ID of the region.</param>
        /// <param name="platform">The platform associated with the value.</param>
        /// <param name="systemService">The system service associated with the value.</param>
        /// <param name="addressPrefixes">The address prefixes associated with the value.</param>
        /// <param name="networkFeatures">The network features associated with the value.</param>
        [JsonConstructor]
        public ValueProperties(Option<int?> changeNumber = default, Option<string?> region = default, Option<int?> regionId = default, Option<string?> platform = default, Option<string?> systemService = default, Option<List<string>?> addressPrefixes = default, Option<List<string>?> networkFeatures = default)
        {
            ChangeNumberOption = changeNumber;
            RegionOption = region;
            RegionIdOption = regionId;
            PlatformOption = platform;
            SystemServiceOption = systemService;
            AddressPrefixesOption = addressPrefixes;
            NetworkFeaturesOption = networkFeatures;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ChangeNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ChangeNumberOption { get; private set; }

        /// <summary>
        /// The number associated with the change.
        /// </summary>
        /// <value>The number associated with the change.</value>
        [JsonPropertyName("changeNumber")]
        public int? ChangeNumber { get { return this.ChangeNumberOption; } set { this.ChangeNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Region
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RegionOption { get; private set; }

        /// <summary>
        /// The region associated with the value.
        /// </summary>
        /// <value>The region associated with the value.</value>
        [JsonPropertyName("region")]
        public string? Region { get { return this.RegionOption; } set { this.RegionOption = new(value); } }

        /// <summary>
        /// Used to track the state of RegionId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RegionIdOption { get; private set; }

        /// <summary>
        /// The ID of the region.
        /// </summary>
        /// <value>The ID of the region.</value>
        [JsonPropertyName("regionId")]
        public int? RegionId { get { return this.RegionIdOption; } set { this.RegionIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Platform
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PlatformOption { get; private set; }

        /// <summary>
        /// The platform associated with the value.
        /// </summary>
        /// <value>The platform associated with the value.</value>
        [JsonPropertyName("platform")]
        public string? Platform { get { return this.PlatformOption; } set { this.PlatformOption = new(value); } }

        /// <summary>
        /// Used to track the state of SystemService
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SystemServiceOption { get; private set; }

        /// <summary>
        /// The system service associated with the value.
        /// </summary>
        /// <value>The system service associated with the value.</value>
        [JsonPropertyName("systemService")]
        public string? SystemService { get { return this.SystemServiceOption; } set { this.SystemServiceOption = new(value); } }

        /// <summary>
        /// Used to track the state of AddressPrefixes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> AddressPrefixesOption { get; private set; }

        /// <summary>
        /// The address prefixes associated with the value.
        /// </summary>
        /// <value>The address prefixes associated with the value.</value>
        [JsonPropertyName("addressPrefixes")]
        public List<string>? AddressPrefixes { get { return this.AddressPrefixesOption; } set { this.AddressPrefixesOption = new(value); } }

        /// <summary>
        /// Used to track the state of NetworkFeatures
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> NetworkFeaturesOption { get; private set; }

        /// <summary>
        /// The network features associated with the value.
        /// </summary>
        /// <value>The network features associated with the value.</value>
        [JsonPropertyName("networkFeatures")]
        public List<string>? NetworkFeatures { get { return this.NetworkFeaturesOption; } set { this.NetworkFeaturesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValueProperties {\n");
            sb.Append("  ChangeNumber: ").Append(ChangeNumber).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  RegionId: ").Append(RegionId).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  SystemService: ").Append(SystemService).Append("\n");
            sb.Append("  AddressPrefixes: ").Append(AddressPrefixes).Append("\n");
            sb.Append("  NetworkFeatures: ").Append(NetworkFeatures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ValueProperties" />
    /// </summary>
    public class ValuePropertiesJsonConverter : JsonConverter<ValueProperties>
    {
        /// <summary>
        /// Deserializes json to <see cref="ValueProperties" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ValueProperties Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> changeNumber = default;
            Option<string?> region = default;
            Option<int?> regionId = default;
            Option<string?> platform = default;
            Option<string?> systemService = default;
            Option<List<string>?> addressPrefixes = default;
            Option<List<string>?> networkFeatures = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "changeNumber":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                changeNumber = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "region":
                            region = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "regionId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                regionId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "platform":
                            platform = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "systemService":
                            systemService = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "addressPrefixes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                addressPrefixes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "networkFeatures":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                networkFeatures = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (changeNumber.IsSet && changeNumber.Value == null)
                throw new ArgumentNullException(nameof(changeNumber), "Property is not nullable for class ValueProperties.");

            if (region.IsSet && region.Value == null)
                throw new ArgumentNullException(nameof(region), "Property is not nullable for class ValueProperties.");

            if (regionId.IsSet && regionId.Value == null)
                throw new ArgumentNullException(nameof(regionId), "Property is not nullable for class ValueProperties.");

            if (platform.IsSet && platform.Value == null)
                throw new ArgumentNullException(nameof(platform), "Property is not nullable for class ValueProperties.");

            if (systemService.IsSet && systemService.Value == null)
                throw new ArgumentNullException(nameof(systemService), "Property is not nullable for class ValueProperties.");

            if (addressPrefixes.IsSet && addressPrefixes.Value == null)
                throw new ArgumentNullException(nameof(addressPrefixes), "Property is not nullable for class ValueProperties.");

            if (networkFeatures.IsSet && networkFeatures.Value == null)
                throw new ArgumentNullException(nameof(networkFeatures), "Property is not nullable for class ValueProperties.");

            return new ValueProperties(changeNumber, region, regionId, platform, systemService, addressPrefixes, networkFeatures);
        }

        /// <summary>
        /// Serializes a <see cref="ValueProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="valueProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ValueProperties valueProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, valueProperties, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ValueProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="valueProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ValueProperties valueProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            if (valueProperties.RegionOption.IsSet && valueProperties.Region == null)
                throw new ArgumentNullException(nameof(valueProperties.Region), "Property is required for class ValueProperties.");

            if (valueProperties.PlatformOption.IsSet && valueProperties.Platform == null)
                throw new ArgumentNullException(nameof(valueProperties.Platform), "Property is required for class ValueProperties.");

            if (valueProperties.SystemServiceOption.IsSet && valueProperties.SystemService == null)
                throw new ArgumentNullException(nameof(valueProperties.SystemService), "Property is required for class ValueProperties.");

            if (valueProperties.AddressPrefixesOption.IsSet && valueProperties.AddressPrefixes == null)
                throw new ArgumentNullException(nameof(valueProperties.AddressPrefixes), "Property is required for class ValueProperties.");

            if (valueProperties.NetworkFeaturesOption.IsSet && valueProperties.NetworkFeatures == null)
                throw new ArgumentNullException(nameof(valueProperties.NetworkFeatures), "Property is required for class ValueProperties.");

            if (valueProperties.ChangeNumberOption.IsSet)
                writer.WriteNumber("changeNumber", valueProperties.ChangeNumberOption.Value!.Value);

            if (valueProperties.RegionOption.IsSet)
                writer.WriteString("region", valueProperties.Region);

            if (valueProperties.RegionIdOption.IsSet)
                writer.WriteNumber("regionId", valueProperties.RegionIdOption.Value!.Value);

            if (valueProperties.PlatformOption.IsSet)
                writer.WriteString("platform", valueProperties.Platform);

            if (valueProperties.SystemServiceOption.IsSet)
                writer.WriteString("systemService", valueProperties.SystemService);

            if (valueProperties.AddressPrefixesOption.IsSet)
            {
                writer.WritePropertyName("addressPrefixes");
                JsonSerializer.Serialize(writer, valueProperties.AddressPrefixes, jsonSerializerOptions);
            }
            if (valueProperties.NetworkFeaturesOption.IsSet)
            {
                writer.WritePropertyName("networkFeatures");
                JsonSerializer.Serialize(writer, valueProperties.NetworkFeatures, jsonSerializerOptions);
            }
        }
    }
}
