//
// ValueProperties.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ValueProperties: Codable, JSONEncodable, Hashable {

    /** The number associated with the change. */
    public var changeNumber: Int?
    /** The region associated with the value. */
    public var region: String?
    /** The ID of the region. */
    public var regionId: Int?
    /** The platform associated with the value. */
    public var platform: String?
    /** The system service associated with the value. */
    public var systemService: String?
    /** The address prefixes associated with the value. */
    public var addressPrefixes: [String]?
    /** The network features associated with the value. */
    public var networkFeatures: [String]?

    public init(changeNumber: Int? = nil, region: String? = nil, regionId: Int? = nil, platform: String? = nil, systemService: String? = nil, addressPrefixes: [String]? = nil, networkFeatures: [String]? = nil) {
        self.changeNumber = changeNumber
        self.region = region
        self.regionId = regionId
        self.platform = platform
        self.systemService = systemService
        self.addressPrefixes = addressPrefixes
        self.networkFeatures = networkFeatures
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case changeNumber
        case region
        case regionId
        case platform
        case systemService
        case addressPrefixes
        case networkFeatures
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(changeNumber, forKey: .changeNumber)
        try container.encodeIfPresent(region, forKey: .region)
        try container.encodeIfPresent(regionId, forKey: .regionId)
        try container.encodeIfPresent(platform, forKey: .platform)
        try container.encodeIfPresent(systemService, forKey: .systemService)
        try container.encodeIfPresent(addressPrefixes, forKey: .addressPrefixes)
        try container.encodeIfPresent(networkFeatures, forKey: .networkFeatures)
    }
}

