/**
* Azure IP Ranges and Service Tags - Public Cloud
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 0.10.1-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param changeNumber The number associated with the change.
 * @param region The region associated with the value.
 * @param regionId The ID of the region.
 * @param platform The platform associated with the value.
 * @param systemService The system service associated with the value.
 * @param addressPrefixes The address prefixes associated with the value.
 * @param networkFeatures The network features associated with the value.
 */
object ValuePropertiess : BaseTable<ValueProperties>("ValueProperties") {
    val changeNumber = int("changeNumber") /* null */ /* The number associated with the change. */
    val region = text("region") /* null */ /* The region associated with the value. */
    val regionId = int("regionId") /* null */ /* The ID of the region. */
    val platform = text("platform") /* null */ /* The platform associated with the value. */
    val systemService = text("systemService") /* null */ /* The system service associated with the value. */

    /**
     * Create an entity of type ValueProperties from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = ValueProperties(
        changeNumber = row[changeNumber]  /* kotlin.Int? */ /* The number associated with the change. */,
        region = row[region]  /* kotlin.String? */ /* The region associated with the value. */,
        regionId = row[regionId]  /* kotlin.Int? */ /* The ID of the region. */,
        platform = row[platform]  /* kotlin.String? */ /* The platform associated with the value. */,
        systemService = row[systemService]  /* kotlin.String? */ /* The system service associated with the value. */,
        addressPrefixes = emptyList() /* kotlin.Array<kotlin.String>? */ /* The address prefixes associated with the value. */,
        networkFeatures = emptyList() /* kotlin.Array<kotlin.String>? */ /* The network features associated with the value. */
    )

    /**
    * Assign all the columns from the entity of type ValueProperties to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = ValueProperties()
    * database.update(ValuePropertiess, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: ValueProperties) {
        this.apply {
            set(ValuePropertiess.changeNumber, entity.changeNumber)
            set(ValuePropertiess.region, entity.region)
            set(ValuePropertiess.regionId, entity.regionId)
            set(ValuePropertiess.platform, entity.platform)
            set(ValuePropertiess.systemService, entity.systemService)
        }
    }

}


object ValuePropertiesAddressPrefixes : BaseTable<Pair<kotlin.Long, kotlin.String>>("ValuePropertiesAddressPrefixes") {
    val valueProperties = long("valueProperties")
    val addressPrefixes = text("addressPrefixes")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[valueProperties] ?: 0, row[addressPrefixes] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(ValuePropertiesAddressPrefixes.valueProperties, entity.first)
            set(ValuePropertiesAddressPrefixes.addressPrefixes, entity.second)
        }
    }

}

object ValuePropertiesNetworkFeatures : BaseTable<Pair<kotlin.Long, kotlin.String>>("ValuePropertiesNetworkFeatures") {
    val valueProperties = long("valueProperties")
    val networkFeatures = text("networkFeatures")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[valueProperties] ?: 0, row[networkFeatures] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(ValuePropertiesNetworkFeatures.valueProperties, entity.first)
            set(ValuePropertiesNetworkFeatures.networkFeatures, entity.second)
        }
    }

}

