# coding: utf-8

"""
    Azure IP Ranges and Service Tags - Public Cloud

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.9.0-pre.0
    Contact: blah+oapicf@cliffano.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist

class ValueProperties(BaseModel):
    """
    ValueProperties
    """
    change_number: Optional[StrictInt] = Field(default=None, alias="changeNumber", description="The number associated with the change.")
    region: Optional[StrictStr] = Field(default=None, description="The region associated with the value.")
    region_id: Optional[StrictInt] = Field(default=None, alias="regionId", description="The ID of the region.")
    platform: Optional[StrictStr] = Field(default=None, description="The platform associated with the value.")
    system_service: Optional[StrictStr] = Field(default=None, alias="systemService", description="The system service associated with the value.")
    address_prefixes: Optional[conlist(StrictStr)] = Field(default=None, alias="addressPrefixes", description="The address prefixes associated with the value.")
    network_features: Optional[conlist(StrictStr)] = Field(default=None, alias="networkFeatures", description="The network features associated with the value.")
    __properties = ["changeNumber", "region", "regionId", "platform", "systemService", "addressPrefixes", "networkFeatures"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ValueProperties:
        """Create an instance of ValueProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ValueProperties:
        """Create an instance of ValueProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ValueProperties.parse_obj(obj)

        _obj = ValueProperties.parse_obj({
            "change_number": obj.get("changeNumber"),
            "region": obj.get("region"),
            "region_id": obj.get("regionId"),
            "platform": obj.get("platform"),
            "system_service": obj.get("systemService"),
            "address_prefixes": obj.get("addressPrefixes"),
            "network_features": obj.get("networkFeatures")
        })
        return _obj


